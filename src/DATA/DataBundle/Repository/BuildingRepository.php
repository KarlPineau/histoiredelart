<?php

namespace DATA\DataBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EdificeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BuildingRepository extends EntityRepository
{
    //Fonction comptant l'ensemble des oeuvres :
    public function count() {
       return  $this->createQueryBuilder('u')
                    ->select('COUNT(u)')
                    ->getQuery()
                    ->getSingleScalarResult();
    }
    
    //Fonction retournant une oeuvre au hasard valable pour une session
    public function searchRandBuilding($session) {
        $count =   $this->createQueryBuilder('u')
                        ->select('COUNT(u)')
                        ->where('u.ecoleMatiere LIKE :matiere')
                        ->setParameter('matiere', $session->getSelectMatiere())
                        ->getQuery()
                        ->getSingleScalarResult();

        return $this->createQueryBuilder('u')
                    ->where('u.ecoleMatiere LIKE :matiere')
                    ->setFirstResult(rand(0, $count - 1))
                    ->setMaxResults(1)
                    ->setParameter('matiere', $session->getSelectMatiere())
                    ->getQuery()
                    ->getOneOrNullResult()
        ;
    }
    
    //Fonction retournant toutes les oeuvres valables pour une session
    public function searchAllOeuvres($session) {
        return $this->createQueryBuilder('u')
                    ->where('u.ecoleMatiere LIKE :matiere')
                    ->setParameter('matiere', $session->getSelectMatiere())
                    ->getQuery()
                    ->getResult()
        ;
    }
    
    //Fonction retournant le nombre de fois qu'une oeuvre est utilisÃ© par une session
    public function countOeuvreBySession($oeuvre, $session) {
        return $this->createQueryBuilder('a')
                    ->select('COUNT(u)')
                    ->from('HDAPlayerBundle:playerOeuvre', 'u')
                    ->where('u.playerSession = :playerSession')
                    ->setParameter('playerSession', $session)
                    ->andWhere('u.oeuvre = :oeuvre')
                    ->setParameter('oeuvre', $oeuvre)
                    ->getQuery()
                    ->getSingleScalarResult();
    }
    
    public function getRandOeuvre($session)
    {
        $oeuvre = NULL;
        $oeuvreFirst = $this->searchRandOeuvre($session);
        
        if($this->countOeuvreBySession($oeuvreFirst, $session) > 0)
        {
            foreach ($this->searchAllOeuvres($session) as $oeuvreByArray) {
                if($this->countOeuvreBySession($oeuvreByArray, $session) == 0) {
                    $oeuvre = $oeuvreByArray;
                }
            }
            if($oeuvre == $oeuvreFirst) {$oeuvre = NULL;}
        }
        else {$oeuvre = $oeuvreFirst;}

        return $oeuvre;
    }
}
